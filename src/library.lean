/-
Copyright (c) 2018 Sander Dahmen, Johannes H√∂lzl, Robert Y. Lewis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sander Dahmen, Johannes H√∂lzl, Robert Y. Lewis

"On large subsets of ùîΩ‚Åø_q with no three-term arithmetic progression"
by J. S. Ellenberg and D. Gijswijt

This file contains various support functions, definitions, etc. that will move
to mathlib as we have time.
-/

import data.mv_polynomial data.matrix
import linear_algebra.finsupp linear_algebra.matrix
import topology.instances.real --analysis.exponential
import field_theory.finite field_theory.mv_polynomial

open lattice function

open lattice set linear_map submodule

lemma nat.sub_eq_sub_iff {a b c : ‚Ñï} (h1 : a ‚â§ c) (h2 : b ‚â§ c) : c - a = c - b ‚Üî a = b :=
by rw [nat.sub_eq_iff_eq_add h1, ‚Üê nat.sub_add_comm h2, eq_comm,
  nat.sub_eq_iff_eq_add (le_add_right h2), add_left_cancel_iff]

namespace cardinal

noncomputable theory

def to_nat : cardinal ‚Üí ‚Ñï :=
inv_fun (coe : ‚Ñï ‚Üí cardinal)

@[simp] lemma to_nat_coe (n : ‚Ñï) : to_nat n = n :=
inv_fun_on_eq' (assume n m _ _, cardinal.nat_cast_inj.1) trivial

lemma to_nat_inv {c : cardinal} (h : ‚àÉ n : ‚Ñï, ‚Üën = c) : ‚Üë(to_nat c) = c :=
inv_fun_eq h

lemma to_nat_inf {c : cardinal} (h : ¬¨ ‚àÉ n : ‚Ñï, ‚Üën = c) : to_nat c = 0 :=
by rw [to_nat, inv_fun_neg h]; refl

lemma to_nat_eq {c : cardinal} {n : ‚Ñï} (h : c = n) : to_nat c = n :=
begin
  rw h,
  apply left_inverse_inv_fun,
  intros _ _,
  simp [cardinal.nat_cast_inj]
end

lemma to_nat_of_finite {c : cardinal} (hc : c < omega) : ‚Üë(to_nat c) = c :=
let ‚ü®n, hn‚ü© := lt_omega.1 hc in
to_nat_inv ‚ü®n, hn.symm‚ü©

@[simp] lemma to_nat_zero : to_nat 0 = 0 :=
to_nat_coe 0

@[simp] lemma to_nat_one : to_nat 1 = 1 :=
by rw [‚Üê nat.cast_one, to_nat_coe]

lemma to_nat_add {c1 c2 : cardinal} (hc1 : c1 < omega) (hc2 : c2 < omega) :
  to_nat (c1 + c2) = to_nat c1 + to_nat c2 :=
let ‚ü®_, hn1‚ü© := lt_omega.1 hc1,
    ‚ü®_, hn2‚ü© := lt_omega.1 hc2 in
by rw [hn1, hn2, ‚Üênat.cast_add]; simp only [to_nat_coe]

section
local attribute [instance, priority 0] classical.prop_decidable
lemma pos_of_to_nat_pos {c : cardinal} (hc : c.to_nat > 0) : c > 0 :=
have ‚àÉ a : ‚Ñï, ‚Üëa = c, from by_contradiction $ Œª h,
  have c.to_nat = 0, from inv_fun_neg h,
  by rw this at hc; exact lt_irrefl _ hc,
begin
  rcases this with ‚ü®w|w, hw‚ü©,
  { rw ‚Üêhw at hc, exfalso, apply lt_irrefl 0, simpa using hc },
  { rw ‚Üêhw, simp, apply lt_of_lt_of_le zero_lt_one, apply le_add_right  }
end
end

lemma to_nat_le_of_le {c1 c2 : cardinal} (hc2 : c2 < omega) (h : c1 ‚â§ c2) : c1.to_nat ‚â§ c2.to_nat :=
let ‚ü®n1, hn1‚ü© := lt_omega.1 (lt_of_le_of_lt h hc2),
    ‚ü®n2, hn2‚ü© := lt_omega.1 hc2 in
by simpa [hn1, hn2] using h

lemma to_nat_le {c : cardinal} : ‚Üëc.to_nat ‚â§ c :=
by classical; exact
if hc : ‚àÉ n : ‚Ñï, ‚Üën = c then by rw to_nat_inv hc
else by rw to_nat_inf hc; apply cardinal.zero_le

end cardinal

lemma int.to_nat_le_iff (n : ‚Ñï) (i : ‚Ñ§) (hi : 0 ‚â§ i) : n ‚â§ i.to_nat ‚Üî (n : ‚Ñ§) ‚â§ i :=
begin
  rcases int.eq_coe_of_zero_le hi with ‚ü®m, rfl‚ü©,
  exact (int.coe_nat_le_coe_nat_iff _ _).symm
end

-- MOVE directly after conditionally complete lattice instance for ‚Ñï
instance nat_dec : decidable_linear_order ‚Ñï :=
decidable_linear_ordered_semiring.to_decidable_linear_order ‚Ñï

namespace finset

lemma sum_le_card_mul_of_bdd {Œ± Œ≤} [decidable_eq Œ±] [ordered_comm_monoid Œ≤] (s : finset Œ±) {f : Œ± ‚Üí Œ≤}
  {a : Œ≤} (h : ‚àÄ i, i ‚àà s ‚Üí f i ‚â§ a) : s.sum f ‚â§ add_monoid.smul s.card a :=
calc s.sum f ‚â§ s.sum (Œª _, a) : finset.sum_le_sum' h
         ... = add_monoid.smul s.card a : finset.sum_const _

end finset

namespace finsupp

lemma sum_matrix {Œ± Œ≤ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ¥} [semiring Œ¥] [fintype Œ≥‚ÇÅ] [fintype Œ≥‚ÇÇ] [has_zero Œ≤] (f : Œ± ‚Üí‚ÇÄ Œ≤)
  (m : Œ± ‚Üí Œ≤ ‚Üí matrix Œ≥‚ÇÅ Œ≥‚ÇÇ Œ¥) (g1 : Œ≥‚ÇÅ) (g2 : Œ≥‚ÇÇ) : f.sum m g1 g2 = f.sum (Œª a b, m a b g1 g2) :=
calc f.sum m g1 g2 = f.sum (Œª a b, m a b g1) g2 :
   congr_fun (eq.symm $ @finset.sum_hom _ _ _ _ _ _ _ (Œª x : matrix Œ≥‚ÇÅ Œ≥‚ÇÇ Œ¥, x g1)
      begin convert is_add_monoid_hom.mk _,
        {constructor, intros, refl},
         refl end) g2
               ... = f.sum (Œª a b, m a b g1 g2) :
   eq.symm $ @finset.sum_hom _ _ _ _ _ _ _ (Œª x : Œ≥‚ÇÇ ‚Üí Œ¥, x g2)
      begin convert is_add_monoid_hom.mk _, {constructor, intros, refl}, refl end

lemma sum_matrix_to_lin
  {Œ± Œ≤ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ¥} [comm_ring Œ¥] [fintype Œ≥‚ÇÅ] [fintype Œ≥‚ÇÇ] [has_zero Œ≤] (f : Œ± ‚Üí‚ÇÄ Œ≤)
  (m : Œ± ‚Üí Œ≤ ‚Üí matrix Œ≥‚ÇÅ Œ≥‚ÇÇ Œ¥) : (f.sum m).to_lin = f.sum (Œª a b, (m a b).to_lin) :=
(@finset.sum_hom _ _ _ _ _ _ _  _ (@matrix.to_lin.is_add_monoid_hom Œ≥‚ÇÅ Œ≥‚ÇÇ _ _ Œ¥ _)).symm

lemma congr_fun {Œ± Œ≤} [has_zero Œ≤] {f g : Œ± ‚Üí‚ÇÄ Œ≤} (h : f = g) : ‚àÄ a : Œ±, f a = g a :=
Œª _, by rw h

lemma eq_of_single_eq_left {Œ± Œ≤} [decidable_eq Œ±] [decidable_eq Œ≤] [has_zero Œ≤] {a a' : Œ±}
  {b b' : Œ≤} (h : single a b = single a' b') (hb : b ‚â† 0) : a = a' :=
(((single_eq_single_iff _ _ _ _).1 h).resolve_right $ mt and.left hb).1

end finsupp

namespace fintype
variables {Œ± : Type*} [fintype Œ±]

lemma card_fin_arrow {n Œ≤} [fintype Œ≤] : fintype.card (fin n ‚Üí Œ≤) = fintype.card Œ≤^n :=
by simp

lemma card_eq_of_bijective {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] {f : Œ± ‚Üí Œ≤} (hf : function.bijective f) :
  fintype.card Œ± = fintype.card Œ≤ :=
fintype.card_congr $ equiv.of_bijective hf

lemma subtype_card_true : fintype.card (subtype (Œª x : Œ±, true)) = fintype.card Œ± :=
fintype.card_congr (equiv.set.univ Œ±)

lemma subtype_card_sum {P Q : Œ± ‚Üí Prop} [decidable_pred P] [decidable_pred Q]
  (h : ‚àÄ x, ¬¨ P x ‚à® ¬¨ Q x) :
  fintype.card (subtype P ‚äï subtype Q) = fintype.card (subtype (Œª x, P x ‚à® Q x)) :=
fintype.card_congr $ equiv.symm $ equiv.set.union $ set.eq_empty_of_subset_empty $
  assume x ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, (h x).cases_on (assume h, h h‚ÇÅ) (assume h, h h‚ÇÇ)

lemma subtype_disj_card_sum {P : Œ± ‚Üí Prop} [decidable_pred P] :
  fintype.card (subtype P ‚äï subtype (Œª x, ¬¨ P x)) = fintype.card Œ± :=
fintype.card_congr $ equiv.set.sum_compl {x | P x}

end fintype

def fin.sum {n} {Œ±} [add_comm_monoid Œ±] (f : fin n ‚Üí Œ±) : Œ± :=
finset.univ.sum f

lemma fin.sum_add {n} {Œ±} [add_comm_monoid Œ±] (f g : fin n ‚Üí Œ±) :
  fin.sum f + fin.sum g = fin.sum (Œª i, f i + g i) :=
eq.symm $ finset.sum_add_distrib

@[simp] lemma fin.sum_const (n : ‚Ñï) {Œ±} [semiring Œ±] (a : Œ±) : fin.sum (Œª _ : fin n, a) = n * a :=
by convert finset.sum_const _; simp [finset.card_univ, add_monoid.smul_eq_mul]

section

def finsupp_of_finmap {n} {Œ±} [has_zero Œ±] [decidable_eq Œ±] (f : fin n ‚Üí Œ±) : fin n ‚Üí‚ÇÄ Œ± :=
{ support := finset.univ.filter (Œª x, f x ‚â† 0),
  to_fun := f,
  mem_support_to_fun := by simp }

@[simp] lemma finsupp_of_finmap_eq {n Œ±} [has_zero Œ±] [decidable_eq Œ±] (f : fin n ‚Üí‚ÇÄ Œ±) :
  finsupp_of_finmap (Œª x, f x) = f :=
finsupp.ext $ Œª x, rfl

instance {n Œ≤} [fintype Œ≤] [has_zero Œ≤] [decidable_eq Œ≤] : fintype (fin n ‚Üí‚ÇÄ Œ≤) :=
{ elems := (fintype.elems (fin n ‚Üí Œ≤)).image finsupp_of_finmap,
  complete := Œª f, multiset.mem_erase_dup.2 $ multiset.mem_map.2
    ‚ü®Œª x, f x, ‚ü®multiset.mem_map.2 ‚ü®Œª a _, f a, by simp‚ü©, by simp‚ü©‚ü© }

instance {n Œ±} [has_zero Œ±] [decidable_eq Œ±] : has_coe (fin n ‚Üí Œ±) (fin n ‚Üí‚ÇÄ Œ±) :=
‚ü®finsupp_of_finmap‚ü©

@[simp] lemma finsupp_of_finmap_to_fun_eq {n Œ±} [has_zero Œ±] [decidable_eq Œ±] (f : fin n ‚Üí Œ±) (x) :
  (f : fin n ‚Üí‚ÇÄ Œ±) x = f x := rfl

@[simp] lemma finset_sum_support {n} {Œ±} [add_comm_monoid Œ±] [decidable_eq Œ±] (f : fin n ‚Üí Œ±) :
  finset.sum (finsupp.support (f : fin n ‚Üí‚ÇÄ Œ±)) (‚Üëf : fin n ‚Üí‚ÇÄ Œ±) = finset.sum finset.univ f :=
calc  finset.sum (finsupp.support (f : fin n ‚Üí‚ÇÄ Œ±)) (‚Üëf : fin n ‚Üí‚ÇÄ Œ±)
    = finset.sum finset.univ (‚Üëf : fin n ‚Üí‚ÇÄ Œ±) :
        finset.sum_subset (Œª _ _, finset.mem_univ _)
                          (Œª x _ hx, by simpa using mt finsupp.mem_support_iff.2 hx)
... = finset.sum finset.univ f : finset.sum_congr rfl (by simp)

lemma fin_sum_finsupp_sum {n} {Œ±} [add_comm_monoid Œ±] [decidable_eq Œ±] (f : fin n ‚Üí Œ±) :
  fin.sum f = finsupp.sum (f : fin n ‚Üí‚ÇÄ Œ±) (Œª b a, a) :=
by simp only [fin.sum, finsupp.sum, finset_sum_support]

end

lemma cast_fin_fn {a b} (f : fin a ‚Üí fin b) (x : fin a) : (‚Üëf : fin a ‚Üí ‚Ñï) x = (f x).val :=
rfl


section vector_sum

lemma fin.sum_zero {Œ±} [add_comm_monoid Œ±] (f : fin 0 ‚Üí Œ±) : fin.sum f = 0 :=
finset.sum_eq_zero $ Œª x, fin_zero_elim x

lemma fin.sum_succ {Œ±} [add_comm_monoid Œ±] {n : ‚Ñï} (f : fin (n+1) ‚Üí Œ±) :
  fin.sum f = f ‚ü®n, nat.lt_succ_self _‚ü© + fin.sum (Œª k : fin n, f ‚ü®k, nat.lt_succ_of_lt k.is_lt‚ü©) :=
have h : @finset.univ (fin (n+1)) _ = finset.univ.image (Œª k: fin n, ‚ü®k.val, nat.lt_succ_of_lt k.is_lt‚ü©) ‚à™ finset.singleton ‚ü®n, nat.lt_succ_self _‚ü©,
  from eq.symm $ finset.eq_univ_iff_forall.2 $ Œª x, if hx : x.val = n
    then finset.mem_union_right _ (finset.mem_singleton.2 (fin.eq_of_veq hx))
    else finset.mem_union_left _ (finset.mem_image.2
      ‚ü®‚ü®x.val, nat.lt_of_le_and_ne (nat.le_of_lt_succ x.is_lt) hx‚ü©,
        finset.mem_univ _, fin.eq_of_veq rfl‚ü©),
begin
  rw [fin.sum, h, finset.sum_union, add_comm],
  { congr' 1,
    { apply finset.sum_singleton },
    { rw [fin.sum, finset.sum_image], refl,
      intros x _ y _ heq,
      rw fin.ext_iff at ‚ä¢ heq, exact heq } },
  { apply finset.eq_empty_of_forall_not_mem,
    intros x hx,
    rcases finset.mem_image.1 (finset.mem_of_mem_inter_left hx) with ‚ü®y, _, hy‚ü©,
    have hxn : x.val = n, from fin.veq_of_eq (finset.mem_singleton.1 (finset.mem_of_mem_inter_right hx)),
    have hxy : y.val = x.val, from fin.veq_of_eq hy,
    linarith [y.is_lt] }
end

lemma vector.vec_one {Œ±} : ‚àÄ v : vector Œ± 1, v = v.head::vector.nil
| ‚ü®[h],_‚ü© := rfl

def vector.sum {Œ±} [add_comm_monoid Œ±] {n} (v : vector Œ± n) : Œ± :=
v.to_list.sum

def vector.nat_sum {n k} (v : vector (fin n) k) : ‚Ñï :=
(v.map fin.val).sum

@[simp] lemma vector.nat_sum_nil (n) : (vector.nil : vector (fin n) 0).nat_sum = 0 :=
by simp [vector.nat_sum, vector.sum]

@[simp] lemma vector.nat_sum_vec_zero {n} (v : vector (fin n) 0) : v.nat_sum = 0 :=
by rw [v.eq_nil, vector.nat_sum_nil]

@[simp] lemma vector.nat_sum_cons {q n} (v : vector (fin q) n) (i : fin q) : (i::v).nat_sum = i.val + v.nat_sum :=
by simp [vector.nat_sum, vector.sum, vector.to_list_cons, vector.map_cons]; refl

lemma vector.nat_sum_head_tail {q n} (v : vector (fin q) (n+1)) : v.nat_sum = v.head.val + v.tail.nat_sum :=
by rw [‚Üêvector.cons_head_tail v, vector.nat_sum_cons]; simp

lemma vector.nat_sum_one {q} : ‚àÄ (v : vector (fin q) 1), v.nat_sum < q
| ‚ü®h::[], _‚ü© := by simp [vector.nat_sum, vector.sum, vector.map, h.is_lt]

lemma vector.cons_inj {Œ±} {n} : ‚àÄ {i j} {v w : vector Œ± n} (h : i::v = j::w), v = w
| _ _ ‚ü®[],_‚ü© ‚ü®[],_‚ü© h := by cases subtype.ext.1 h; refl
| _ _ ‚ü®_::_,_‚ü© ‚ü®_::_,_‚ü© h := by cases subtype.ext.1 h; refl

lemma vector.cons_inj_left {Œ± n} : ‚àÄ {i j} {v w : vector Œ± n} (h : i::v = j::w), i = j
| _ _ ‚ü®[],_‚ü© ‚ü®[],_‚ü© h := by cases subtype.ext.1 h; refl
| _ _ ‚ü®_::_,_‚ü© ‚ü®_::_,_‚ü© h := by cases subtype.ext.1 h; refl

end vector_sum
