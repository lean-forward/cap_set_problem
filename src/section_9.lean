/-
Copyright (c) 2018 Sander Dahmen, Johannes H√∂lzl, Robert Y. Lewis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sander Dahmen, Johannes H√∂lzl, Robert Y. Lewis

"On large subsets of ùîΩ‚Åø_q with no three-term arithmetic progression"
by J. S. Ellenberg and D. Gijswijt

This file proves a general result about the dimension of certain subspaces of the space of polynomials.
It corresponds to section 9 of our blueprint.
-/

import library
noncomputable theory
open mv_polynomial

section section_9

parameters {Œ± : Type*} [discrete_field Œ±]

parameters {n : ‚Ñï} (V : subspace Œ± (mv_polynomial (fin n) Œ±)) (A : finset (fin n ‚Üí Œ±))

def zero_set : set (mv_polynomial (fin n) Œ±) := {p ‚àà V.carrier | ‚àÄ a ‚àà A, mv_polynomial.eval a p = 0}

def zero_set_subspace : subspace Œ± (mv_polynomial (fin n) Œ±) :=
{ carrier := zero_set,
  zero := ‚ü®submodule.zero _, by simp‚ü©,
  add := Œª _ _ hx hy, ‚ü®submodule.add _ hx.1 hy.1, Œª _ hp, by simp [hx.2 _ hp, hy.2 _ hp]‚ü©,
  smul := Œª _ _ hp, ‚ü®submodule.smul _ _ hp.1, Œª _ hx, by simp [hp.2 _ hx]‚ü© }

def zero_set_subspace_V : subspace Œ± V :=
{ carrier := {p | ‚àÄ a ‚àà A, mv_polynomial.eval a p = 0},
  zero := Œª _ _, eval_zero,
  add := Œª x y hx hy z hz, show eval z (‚Üëx + ‚Üëy) = 0, by simp only [eval_add, hx _ hz, hy _ hz, zero_add],
  smul := Œª c x hx z hz, show eval z (c ‚Ä¢ ‚Üëx) = 0, by simp only [mv_polynomial.smul_eval, hx _ hz, mul_zero] }

set_option class.instance_max_depth 150

def zss_equiv : zero_set_subspace ‚âÉ‚Çó[Œ±] zero_set_subspace_V :=
{ to_fun := Œª p, ‚ü®‚ü®p.1, p.2.1‚ü©, p.2.2‚ü©,
  add := Œª  _ _, rfl,
  smul := Œª _ _, rfl,
  inv_fun := Œª p, ‚ü®p.1, ‚ü®p.1.2, p.2‚ü©‚ü©,
  left_inv := Œª ‚ü®_, _‚ü©, rfl,
  right_inv := Œª ‚ü®‚ü®_, _‚ü©, _‚ü©, rfl }

lemma zss_v_dim_eq_zss_dim : vector_space.dim Œ± zero_set_subspace_V = vector_space.dim Œ± zero_set_subspace :=
zss_equiv.symm.dim_eq

set_option class.instance_max_depth 50

def Atp := {x // x ‚àà A}

instance Atp_fin : fintype Atp := by dunfold Atp; apply_instance

lemma Atp_card : fintype.card Atp = A.card := fintype.subtype_card _ $ Œª _, iff.refl _

def vfmap (p : V) : (Atp ‚Üí Œ±) := Œª v, mv_polynomial.eval v.1 p

def vflmap : V ‚Üí‚Çó[Œ±] (Atp ‚Üí Œ±) :=
{ to_fun := Œª p, vfmap p,
  add := Œª x y, funext $ Œª z, mv_polynomial.eval_add,
  smul := Œª c x, funext $ Œª z, mv_polynomial.smul_eval _ _ _ }

lemma vflmap_ker : vflmap.ker = zero_set_subspace_V :=
begin
  ext,
  rw linear_map.mem_ker,
  split,
  { intros h v hv,
    change v with (‚ü®v, hv‚ü© : Atp).val,
    apply congr_fun h },
  { intros h,
    ext v,
    apply h,
    exact v.2 }
end

lemma dim_Œ±_A : vector_space.dim Œ± (Atp ‚Üí Œ±) = A.card :=
by rw ‚ÜêAtp_card; apply dim_fun'

lemma lemma_9_2_pre : (vector_space.dim Œ± zero_set_subspace) + A.card ‚â• (vector_space.dim Œ± V) :=
begin
  have hrn, from dim_range_add_dim_ker vflmap,
  rw [vflmap_ker, zss_v_dim_eq_zss_dim] at hrn,
  rw [add_comm, ‚Üêhrn],
  apply add_le_add_right',
  rw ‚Üêdim_Œ±_A,
  apply dim_submodule_le
end

lemma zero_set_subspace_dim (hv : vector_space.dim Œ± V < cardinal.omega) :
  vector_space.dim Œ± zero_set_subspace < cardinal.omega :=
by rw ‚Üêzss_v_dim_eq_zss_dim; exact lt_of_le_of_lt (dim_submodule_le _) hv

theorem lemma_9_2 (zss_finite_dim : vector_space.dim Œ± zero_set_subspace < cardinal.omega) :
  (vector_space.dim Œ± zero_set_subspace).to_nat + A.card ‚â• (vector_space.dim Œ± V).to_nat :=
suffices (vector_space.dim Œ± zero_set_subspace + A.card).to_nat ‚â• (vector_space.dim Œ± V).to_nat,
  begin
    rw [cardinal.to_nat_add, cardinal.to_nat_coe] at this,
    { exact this },
    { exact zss_finite_dim },
    { apply cardinal.nat_lt_omega }
  end,
cardinal.to_nat_le_of_le
  (cardinal.add_lt_omega zss_finite_dim (cardinal.nat_lt_omega _))
  lemma_9_2_pre

end section_9